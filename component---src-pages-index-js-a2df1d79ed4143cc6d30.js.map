{"version":3,"file":"component---src-pages-index-js-a2df1d79ed4143cc6d30.js","mappings":"uJAMMA,E,QAAkBC,GAsCxB,IApCe,YACIC,EAAAA,EAAAA,gBAAe,cAAxBC,KAYR,OACE,uBAAKC,UAAU,kBACZJ,EAAgBK,KAAI,SAACC,EAAMC,GAC1B,OAAID,EAAKE,WAEL,gBAACC,EAAiB,CAACC,IAAKH,GACtB,gBAAC,EAAAI,KAAI,CAACC,GAAIN,EAAKO,IAAKC,OAAO,SAASC,IAAI,uBACrCT,EAAKU,QAOZ,uBAAKZ,UAAU,OAAOM,IAAKH,GACzB,gBAAC,EAAAI,KAAI,CAACC,GAAIN,EAAKO,KAAMP,EAAKU,OAGhC,IAGN,EAIA,IAQMP,EAAoB,SAAH,GAAsB,IAAhBQ,EAAQ,EAARA,SAC3B,OAAO,2BAAMA,EACf,C,6CC1BA,IA3Be,SAAH,GAAc,EAARC,SAAe,EAALC,MAAuB,IAAhBF,EAAQ,EAARA,SAmBjC,OACE,uBAAKb,UAAU,kBAEb,4BAAOa,GAGb,C,yFC5BA,EAAe,IAA0B,0DCkCzC,EA5Ba,WACX,IAAMG,EAAWC,EAAAA,SACjB,OACE,gBAAC,EAAAC,YAAW,CACVC,MAAK,aASLC,OAAQ,SAAAC,GACN,OAAOL,EACL,0BACE,gBAAC,EAAAT,KAAI,CAACC,GAAG,KAAKQ,IAGhB,uBAAKhB,UAAU,kBACb,uBAAKsB,IAAKC,EAASvB,UAAU,WAAWwB,IAAI,YAGlD,GAGN,C,+CCrBMC,EAAM,SAAH,GAAgD,IAAD,MAAzCC,EAAW,EAAXA,YAAmBX,GAAF,EAAJY,KAAW,EAALZ,OAAOF,EAAQ,EAARA,SAC/Bd,GAASD,EAAAA,EAAAA,gBAAe,cAAxBC,KAmCF6B,EAAkBF,GAAe3B,EAAK8B,aAAaH,YACnDI,EAAgC,QAApB,EAAG/B,EAAK8B,oBAAY,aAAjB,EAAmBd,MAExC,OACE,gCACE,6BAAQe,EAAkBf,EAAK,MAAMe,EAAiBf,GACtD,wBAAMgB,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASjB,IACnC,wBAAMkB,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAjC,EAAK8B,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,QAAQC,WAAQ,KAEtD,wBAAML,KAAK,gBAAgBC,QAASjB,IACpC,wBAAMgB,KAAK,sBAAsBC,QAASJ,IACzCf,EAGP,EAEAY,EAAIY,aAAe,CACjBX,YAAY,IAQd,K,sHCmBA,EAvFY,WAAO,IAAD,IACVL,GAAOvB,EAAAA,EAAAA,gBAAe,cAqCtBwC,EAA+B,QAAzB,EAAGjB,EAAKtB,KAAK8B,oBAAY,aAAtB,EAAwBS,OACjCC,EAAmC,QAAzB,EAAGlB,EAAKtB,KAAK8B,oBAAY,aAAtB,EAAwBK,OACrCM,EAAcC,OAAOC,KAAKH,GAEhC,OACE,uBAAKvC,UAAU,YACZsC,aAAM,EAANA,EAAQK,UACP,uBACErB,IAAKgB,EAAOK,QACZC,MAAO,IACPC,OAAQ,IACR7C,UAAU,iBACVwB,IAAI,oBAGR,4BACGc,aAAM,EAANA,EAAQP,OACP,2BACE,qBAAG/B,UAAU,QACX,8BAASsC,EAAOP,OAElB,0BAAIO,aAAM,EAANA,EAAQQ,UAAW,QAI7B,2BACGN,EAAYvC,KACX,SAAC8C,EAAWC,GAAC,OACXT,EAAWQ,GAAWX,UACpB,qBACEa,KACEV,EAAWQ,GAAWtC,IAAM8B,EAAWQ,GAAWX,SAEpD1B,OAAO,SACPC,IAAI,aACJL,IAAK0C,GAEL,uBACE1B,IAAG,UAAYiB,EAAWQ,GAAWhC,MAAK,OAC1CS,IAAKe,EAAWQ,GAAWhC,QAGhC,KAKb,E,oBCxBA,EApEiB,WACf,OACE,gBAAC,EAAAG,YAAW,CACVC,MAAK,aAyBLC,OAAQ,SAAAC,GAAI,OACV,uBAAKrB,UAAU,uBACb,sBAAIkD,MAAO,CAAEC,UAAU,SACpB9B,EAAK+B,kBAAkBC,MAAMpD,KAAI,SAAAqD,GAChC,IAAMvC,EAAQuC,EAAKC,YAAYxC,OAASuC,EAAKE,OAAOC,KAEpD,OACE,sBAAInD,IAAKgD,EAAKE,OAAOC,MACnB,2BACEzD,UAAU,iBACV0D,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAApD,KAAI,CAACC,GAAI8C,EAAKE,OAAOC,KAAMG,SAAS,OACnC,wBAAMA,SAAS,YAAY7C,KAG/B,6BAAQuC,EAAKC,YAAYM,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQT,EAAKC,YAAY7B,aAAe4B,EAAKU,SAE/CJ,SAAS,kBAMrB,KAEE,GAId,EChEMK,E,QAAgBpE,GAkDtB,EAhDiB,WACf,OACE,gBAAC,EAAAqB,YAAW,CACVC,MAAK,aAoBLC,OAAQ,SAAAC,GAAI,OACV,uBAAKrB,UAAU,YACb,2BACGiE,EAAchE,KAAI,SAAAiE,GAAQ,OACzB,uBAAK5D,IAAK4D,GACR,gBAAC,EAAA3D,KAAI,CACHC,GACe,SAAb0D,EAAmB,aAEf7C,EAAK+B,kBAAkBe,aAAaC,SAASF,GAAS,IAClDA,EAAQ,oBAIjBA,GAEC,KAGN,GAId,ECnBA,EA9Bc,WAGZ,OACE,gBAAC,EAAAhD,YAAW,CACVC,MAAK,aASLC,OAAQ,SAAAC,GACN,OAME,uBAAKrB,UAAU,SACb,0BApBQ,YAuBd,GAGN,E,oBCqBA,EAzCkB,SAAH,GAA4B,IAAD,EAArBqB,EAAI,EAAJA,KAAMP,EAAQ,EAARA,SACnBuD,GAAkC,QAAtB,EAAAhD,EAAKtB,KAAK8B,oBAAY,aAAtB,EAAwBd,QAAK,QAG/C,OAAqB,IAFPM,EAAK+B,kBAAkBC,MAE3BiB,OAEN,gBAAC,IAAM,CAACxD,SAAUA,EAAUC,MAAOsD,GACjC,uBAAKrE,UAAU,gBACb,gBAAC,EAAO,MACR,wLAWN,gBAAC,IAAM,CAACc,SAAUA,EAAUC,MAAOsD,GACjC,uBAAKrE,UAAU,eACb,gBAAC,IAAI,MACL,gBAAC,IAAM,OAET,uBAAKA,UAAU,eACb,uBAAKA,UAAU,kBACb,uBAAKA,UAAU,kBACb,gBAAC,EAAK,MACN,gBAAC,EAAQ,OAEX,uBAAKA,UAAU,kBACb,gBAAC,EAAO,MACR,gBAAC,EAAQ,SAMrB,EASauE,EAAO,WAAH,OAAS,gBAAC,IAAG,CAACxD,MAAM,aAAc,C","sources":["webpack://gatsby-starter-blog/./src/components/header.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/images/gatsby-icon.png","webpack://gatsby-starter-blog/./src/components/logo.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/profile.js","webpack://gatsby-starter-blog/./src/components/contents.js","webpack://gatsby-starter-blog/./src/components/category.js","webpack://gatsby-starter-blog/./src/components/title.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport setting from \"/src/util/customizing-setting\"\n\nconst HEADER_NAV_ITEM = setting.pages\n\nconst Header = () => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `\n  )\n\n  return (\n    <div className=\"page-container\">\n      {HEADER_NAV_ITEM.map((item, index) => {\n        if (item.isExternal) {\n          return (\n            <HeaderNavListItem key={index}>\n              <Link to={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {item.label}\n              </Link>\n            </HeaderNavListItem>\n          )\n        }\n\n        return (\n          <div className=\"page\" key={index}>\n            <Link to={item.url}>{item.label}</Link>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Header\n\nconst HeaderNavList = ({ children }) => {\n  return (\n    <div>\n      <div>{children}</div>\n    </div>\n  )\n}\n\nconst HeaderNavListItem = ({ children }) => {\n  return <div>{children}</div>\n}\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  // const isRootPath = location.pathname === rootPath\n  // let header\n\n  // if (isRootPath) {\n  //   header = (\n  //     <h1 className=\"main-heading\">\n  //       <Link to=\"/\">{title}</Link>\n  //     </h1>\n  //   )\n  // } else {\n  //   header = (\n  //     <Link className=\"header-link-home\" to=\"/\">\n  //       {title}\n  //     </Link>\n  //   )\n  // }\n\n  return (\n    <div className=\"global-wrapper\">\n      {/* <header className=\"global-header\">{header}</header> */}\n      <main>{children}</main>\n    </div>\n  )\n}\n\nexport default Layout\n","export default __webpack_public_path__ + \"static/gatsby-icon-8fb027d91d1fd0bc7fe0eb613a8e7a8d.png\";","import { StaticQuery, Link, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport React from \"react\"\nimport customizing from \"../util/customizing-setting.json\"\nimport logoImg from \"../images/gatsby-icon.png\"\n\nconst Logo = () => {\n  const logoText = customizing.logoText\n  return (\n    <StaticQuery\n      query={graphql`\n        query TitleQuery {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `}\n      render={data => {\n        return logoText ? (\n          <h1>\n            <Link to=\"/\">{logoText}</Link>\n          </h1>\n        ) : (\n          <div className=\"logo-container\">\n            <img src={logoImg} className=\"logo-img\" alt=\"logoImg\" />\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nexport default Logo\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter {\n                title\n                url\n                username\n              }\n              github {\n                title\n                url\n                username\n              }\n              instagram {\n                title\n                url\n                username\n              }\n              email {\n                title\n                url\n                username\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter.username || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nSeo.defaultProps = {\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            profile\n            summary\n          }\n          social {\n            twitter {\n              title\n              url\n              username\n            }\n            github {\n              title\n              url\n              username\n            }\n            instagram {\n              title\n              url\n              username\n            }\n            email {\n              title\n              url\n              username\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social_ids = data.site.siteMetadata?.social\n  const _social_ids = Object.keys(social_ids)\n\n  return (\n    <div className=\"profile\">\n      {author?.profile && (\n        <img\n          src={author.profile}\n          width={200}\n          height={200}\n          className=\"profile-avatar\"\n          alt=\"Profile picture\"\n        />\n      )}\n      <div>\n        {author?.name && (\n          <div>\n            <p className=\"name\">\n              <strong>{author.name}</strong>\n            </p>\n            <p>{author?.summary || null}</p>\n          </div>\n        )}\n      </div>\n      <div>\n        {_social_ids.map(\n          (social_id, i) =>\n            social_ids[social_id].username && (\n              <a\n                href={\n                  social_ids[social_id].url + social_ids[social_id].username\n                }\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                key={i}\n              >\n                <img\n                  src={`/icons/${social_ids[social_id].title}.png`}\n                  alt={social_ids[social_id].title}\n                />\n              </a>\n            )\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { StaticQuery, Link, graphql } from \"gatsby\"\n\nconst Contents = () => {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ContentsQuery {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n          allMarkdownRemark(\n            filter: { fields: { contentType: { eq: \"blog\" } } }\n            sort: { order: DESC, fields: frontmatter___date }\n          ) {\n            nodes {\n              excerpt\n              fields {\n                slug\n              }\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                description\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <div className=\"post-list-container\">\n          <ol style={{ listStyle: `none` }}>\n            {data.allMarkdownRemark.nodes.map(post => {\n              const title = post.frontmatter.title || post.fields.slug\n\n              return (\n                <li key={post.fields.slug}>\n                  <article\n                    className=\"post-list-item\"\n                    itemScope\n                    itemType=\"http://schema.org/Article\"\n                  >\n                    <header>\n                      <h2>\n                        <Link to={post.fields.slug} itemProp=\"url\">\n                          <span itemProp=\"headline\">{title}</span>\n                        </Link>\n                      </h2>\n                      <small>{post.frontmatter.date}</small>\n                    </header>\n                    <section>\n                      <p\n                        dangerouslySetInnerHTML={{\n                          __html: post.frontmatter.description || post.excerpt,\n                        }}\n                        itemProp=\"description\"\n                      />\n                    </section>\n                  </article>\n                </li>\n              )\n            })}\n          </ol>\n        </div>\n      )}\n    />\n  )\n}\n\nexport default Contents\n","import React from \"react\"\nimport { StaticQuery, Link, graphql } from \"gatsby\"\n\nimport setting from \"/src/util/customizing-setting\"\n\nconst CATEGORY_ITEM = setting.category\n\nconst Category = () => {\n  return (\n    <StaticQuery\n      query={graphql`\n        query CategoryQuery {\n          allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n          ) {\n            categoryList: distinct(field: frontmatter___category)\n            nodes {\n              excerpt\n              fields {\n                slug\n              }\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                description\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <div className=\"category\">\n          <nav>\n            {CATEGORY_ITEM.map(category => (\n              <div key={category}>\n                <Link\n                  to={\n                    category === \"전체보기\"\n                      ? `/all-posts`\n                      : data.allMarkdownRemark.categoryList.includes(category)\n                      ? `/${category}/`\n                      : `/empty-posts`\n                  }\n                >\n                  {category}\n                </Link>\n              </div>\n            ))}\n          </nav>\n        </div>\n      )}\n    />\n  )\n}\n\nexport default Category\n","import { StaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport React from \"react\"\n\nconst Title = () => {\n  const height = 300\n  const titleText = \"여기가 타이틀임\"\n  return (\n    <StaticQuery\n      query={graphql`\n        query TitleQuery {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `}\n      render={data => {\n        return (\n          // <StaticImage\n          //   height={height}\n          //   src=\"../images/background-default.jpg\"\n          //   alt=\"titleImg\"\n          // />\n          <div className=\"title\">\n            <h3>{titleText}</h3>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nexport default Title\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Profile from \"../components/profile\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Contents from \"../components/contents\"\nimport Category from \"../components/category\"\nimport Title from \"../components/title\"\nimport Logo from \"../components/logo\"\nimport Header from \"../components/header\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <div className=\"display_flex\">\n          <Profile />\n          <p>\n            No blog posts found. Add markdown posts to \"content/blog\" (or the\n            directory you specified for the \"gatsby-source-filesystem\" plugin in\n            gatsby-config.js).\n          </p>\n        </div>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div className=\"display-row\">\n        <Logo />\n        <Header />\n      </div>\n      <div className=\"display-row\">\n        <div className=\"display-grid-r\">\n          <div className=\"display-column\">\n            <Title />\n            <Contents />\n          </div>\n          <div className=\"display-column\">\n            <Profile />\n            <Category />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      categoryList: distinct(field: frontmatter___category)\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["HEADER_NAV_ITEM","setting","useStaticQuery","site","className","map","item","index","isExternal","HeaderNavListItem","key","Link","to","url","target","rel","label","children","location","title","logoText","customizing","StaticQuery","query","render","data","src","logoImg","alt","Seo","description","lang","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","username","defaultProps","author","social_ids","_social_ids","Object","keys","profile","width","height","summary","social_id","i","href","style","listStyle","allMarkdownRemark","nodes","post","frontmatter","fields","slug","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","CATEGORY_ITEM","category","categoryList","includes","siteTitle","length","Head"],"sourceRoot":""}